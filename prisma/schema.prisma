generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Freelancer {
  id         String      @id @default(cuid())

  

  name       String?
  username   String?   @unique
  email      String  @unique
  password   String
  mobile     BigInt?
  city       String?
  country    String?
  pincode    String?
  profession String?
  profileImage String? 

  clients    Client[]  @relation("FreelancerClients") 
  notifications Notification[]
  feedback     FreelancerFeedback[]
  withdrawals   Withdrawal[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Client {
  id           String        @id @default(cuid())

  name         String
  modeOfPay    String
  status        String

  deliveries   Delivery[] @relation("ClientDeliveries")

  freelancerId String
  reelancer   Freelancer   @relation("FreelancerClients", fields: [freelancerId], references: [id])

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  phone        String?      // Optional phone field
  email        String?      // Optional email field
  note         String?       // Added note field
  image        String?       // Added image field
}

model Delivery {
  id         String      @id @default(cuid())


  name       String
  desc       String
  cost       Float
  PaymentStatus  String
  withdrawStatus String   @default("no")

  files         File[]    @relation("DeliveryFiles")  // Changed to DeliveriesFiles

  clientId      String    // Changed from projectId to clientId
  client        Client    @relation("ClientDeliveries", fields: [clientId], references: [id])

  revisions     Revision[] @relation("DeliveryRevisions") // Added relation

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model File {
  id         String      @id @default(cuid())


  name       String
  url        String

  deliveryId  String    
  delivery   Delivery @relation("DeliveryFiles", fields: [deliveryId], references: [id])  // Changed relation name

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PasswordReset {
  id              String   @id @default(cuid())
  userId          String      // Foreign key to Freelancer
  token           String   // Reset token
  tokenExpiration DateTime // Token expiration time
  createdAt       DateTime @default(now()) // When the reset request was created

  @@unique([token])  // Ensure token is unique
}


model OtpVerification {
  email     String   @id
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}


model Blog {
  id          String    @id @default(cuid())
  title       String
  bannerImage String?
  content     String    @db.Text
  published   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
  refLinks    RefLink[]
  tocItems    TocItem[]
}

model RefLink {
  id      String @id @default(cuid())
  title   String
  url     String
  blog    Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId  String
}

model TocItem {
  id      String @id @default(cuid())
  level   Int
  content String
  slug    String
  blog    Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId  String
}
model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Notification {
  id           String      @id @default(cuid())
  title        String
  message      String      @db.Text
  type         String      // "info", "warning", "success", "error"
  
  // For targeting specific freelancers or all
  freelancerId String?     // Null means sent to all freelancers
  freelancer   Freelancer? @relation(fields: [freelancerId], references: [id])
  
  createdAt    DateTime    @default(now())
}

model FreelancerFeedback {
  id            String    @id @default(cuid())
  type          String    // "bug", "feature_request", "general_feedback", "support"
  title         String
  description   String    @db.Text
  priority      String?
  status        String    @default("pending")
  freelancerId  String    
  freelancer    Freelancer @relation(fields: [freelancerId], references: [id])
  adminResponses AdminResponse[]
  statusChanges StatusChange[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model AdminResponse {
  id            String    @id @default(cuid())
  message       String    @db.Text
  feedbackId    String
  feedback      FreelancerFeedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  adminId       String
  createdAt     DateTime  @default(now())
}

model StatusChange {
  id            String    @id @default(cuid())
  oldStatus     String
  newStatus     String
  feedbackId    String
  feedback      FreelancerFeedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  adminId       String
  createdAt     DateTime  @default(now())
}
model Revision {
  id           String     @id @default(cuid())
  message      String     @db.Text
  status       String     @default("pending") // pending, accepted, completed, rejected
  
  responses    RevisionResponse[] @relation("RevisionResponses") // Added relation to responses
  
  deliveryId   String
  delivery     Delivery   @relation("DeliveryRevisions", fields: [deliveryId], references: [id])
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

// RevisionResponse model for freelancer responses to revision requests
model RevisionResponse {
  id           String     @id @default(cuid())
  message      String     @db.Text
  
  revisionId   String
  revision     Revision   @relation("RevisionResponses", fields: [revisionId], references: [id])
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Withdrawal {
  id            String    @id @default(cuid())
  amount        Float
  status        String    @default("pending") // pending, completed, rejected
  note          String?   // Admin notes
  freelancerId  String
  freelancer    Freelancer @relation(fields: [freelancerId], references: [id])
  
  deliveryIds   String[]  // Array of delivery IDs
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
